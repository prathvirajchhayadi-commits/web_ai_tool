from flask import Flask, request, send_file, jsonify
from flask_cors import CORS
import os
import threading
import time
from datetime import datetime

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Simple cleanup function for old files
def cleanup_old_files():
    while True:
        try:
            now = time.time()
            for filename in os.listdir(UPLOAD_FOLDER):
                file_path = os.path.join(UPLOAD_FOLDER, filename)
                if os.path.isfile(file_path) and (now - os.stat(file_path).st_mtime) > 48 * 3600:
                    os.remove(file_path)
        except Exception as e:
            print(f"Cleanup error: {e}")
        time.sleep(6 * 3600)  # Check every 6 hours

# Start cleanup thread
cleanup_thread = threading.Thread(target=cleanup_old_files, daemon=True)
cleanup_thread.start()

@app.route('/')
def serve_frontend():
    return send_file('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    try:
        if 'video' not in request.files:
            return jsonify({'error': 'No file uploaded'}), 400
        
        file = request.files['video']
        language = request.form.get('language', 'english')
        
        if file.filename == '':
            return jsonify({'error': 'No file selected'}), 400
        
        # Save uploaded file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_{file.filename}"
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        file.save(filepath)
        
        # For demo purposes, we'll simulate processing
        # In a real implementation, you would use Whisper and MoviePy here
        
        # Simulate transcript generation
        transcript_content = f"Transcript generated by Red Universe AI\nVideo: {file.filename}\nDate: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nLanguage: {language}\n\nThis is a sample transcript. In a real implementation, actual video transcription would appear here."
        
        transcript_filename = f"{timestamp}_transcript.txt"
        transcript_path = os.path.join(UPLOAD_FOLDER, transcript_filename)
        
        with open(transcript_path, 'w', encoding='utf-8') as f:
            f.write(transcript_content)
        
        # Simulate audio extraction
        audio_filename = f"{timestamp}_audio.mp3"
        audio_path = os.path.join(UPLOAD_FOLDER, audio_filename)
        
        # Create a dummy audio file
        with open(audio_path, 'w') as f:
            f.write("This would be actual audio data in a real implementation")
        
        return jsonify({
            'success': True,
            'audio_file': audio_filename,
            'transcript_file': transcript_filename
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/download/<filename>')
def download_file(filename):
    try:
        return send_file(
            os.path.join(UPLOAD_FOLDER, filename),
            as_attachment=True,
            download_name=filename
        )
    except FileNotFoundError:
        return jsonify({'error': 'File not found'}), 404

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
